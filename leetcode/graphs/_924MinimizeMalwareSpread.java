import java.util.HashMap;
import java.util.Map;
import java.util.Arrays;
public class _924MinimizeMalwareSpread{
    public static void main(String[] args) {
       
       

        HashMap<Integer,Integer> doneByMap=new HashMap<>();
        int [] initials={98,216,116,26,226,36,271,121,55,219,277,144,184,78,138,270,282};
       // boolean [] visited =new boolean [graph.length];
        for (int i = 0; i < initials.length; i++) {
            //dfs(graph, initials[i], initials[i], visited, doneByMap);
            //Arrays.fill(visited,false);
            doneByMap.put(initials[i], 300);
        }
        System.out.println(doneByMap);
        int idx=initials[0];
        for(Map.Entry<Integer,Integer> entry:doneByMap.entrySet()){
            int eVal=entry.getValue();
            int eKey =entry.getKey();
            int mapVal =doneByMap.get(idx);
            if(eVal > doneByMap.get(idx)){
                idx=eKey;
            }
            else if(eVal == mapVal){
                idx=Math.min(idx, eKey);
            }
            
        }
        System.out.println(idx);

        
    }

    public static void dfs(int [][] graph,int parent,int vertex,boolean [] visited,HashMap<Integer,Integer>doneByMap){
        visited[vertex]=true;
        if(doneByMap.containsKey(parent)){
            doneByMap.put(parent, doneByMap.get(parent)+1);
        }else{
            doneByMap.put(parent, 1);
        }

        for (int i = 0; i < graph[vertex].length; i++) {
            if(i!=vertex && graph[vertex][i]==1  && !visited[i] ){
                dfs(graph, parent, i, visited, doneByMap);
            }
        }

    }
}